---

# This is copy of habitat.yaml but with a few difference I need, like deleting Cargo.lock

# Most uniq patterns should go first
# !!! ORDER IS IMPORTANT !!!
patterns:

  # Copyright exactly as recommendation from Chef Company
  'Copyright (c) 2015-2016 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2015-2016 The Habitat Maintainers': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2016-2017 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2016-2018 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2016-2019 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2016-2020 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2016-2021 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2021 Chef Software, Inc"
  'Copyright (c) 2016-2022 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2022 Chef Software, Inc"
  'Copyright (c) 2017-2020 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2018-2021 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2018-2021 Chef Software, Inc"
  'Copyright (c) 2020-2022 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2020-2022 Chef Software, Inc"

  'Copyright (c) 2016 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2017 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2018 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2019 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2020 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2021 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2021 Chef Software, Inc"
  'Copyright (c) 2022 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2022 Chef Software, Inc"

  'Copyright: Copyright (c) 2017 Chef Software, Inc.': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright:: Copyright (c) 2015-2016 Chef Software, Inc': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright 2015-2019 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Copyright (c) 2020-2020 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code (c) 2016-2020 Chef Software, Inc"
  'Chef license agreement': 'Biome license agreement'
  'Chef License Acceptance': 'Biome License Acceptance'
  'Chef products': 'Biome products'
  'Chef Automate': 'Cinc Automate'
  'Chef Binary Distribution': 'Biome Binary Distribution'
  'Chef Habitat': 'Biome'

  'https://github.com/chef/license-acceptance': 'https://github.com/biome-sh/biome'
  'https://www.chef.io/end-user-license-agreement': 'https://github.com/biome-sh/biome'

  # Online resources and links
  '[Habitat](http://habitat.sh)': '[Biome](http://biome.sh)'
  '[Habitat](https://habitat.sh)': '[Biome](https://biome.sh)'
  'http://habitat.sh': 'http://biome.sh'
  'https://habitat.sh': 'https://biome.sh'
  chocolatey.org/packages/habitat: chocolatey.org/packages/biome
  www.habitat.sh: www.habitat.sh
  forums.habitat.sh: forums.habitat.sh
  slack.habitat.sh: slack.habitat.sh
  bldr.acceptance.habitat.sh: bldr.acceptance.habitat.sh
  bldr.habitat.sh: bldr.habitat.sh

  # Keep Original GitHub Issues, PRs, Apps, Links
  github.com/habitat-sh/habitat/issues: github.com/habitat-sh/habitat/issues
  github.com/habitat-sh/habitat/pull: github.com/habitat-sh/habitat/pull
  github.com/apps/habitat-builder: github.com/apps/habitat-builder
  buildkite.com/chef/habitat-sh-habitat-master: buildkite.com/chef/habitat-sh-habitat-master
  www.codetriage.com/habitat-sh/habitat: www.codetriage.com/habitat-sh/habitat
  'habitat-sh/habitat#6509': 'habitat-sh/habitat#6509'

  github.com/habitat-sh/builder/issues: github.com/habitat-sh/bulder/issues
  github.com/habitat-sh/builder/pull: github.com/habitat-sh/builder/pull

  # Contacts
  The Habitat Maintainers: The Biome Maintainers
  humans@habitat.sh: humans@biome.sh

  # Github Source: Preserve
  habitat-sh/rust-zmq: habitat-sh/rust-zmq
  habitat-sh/ipc-channel: habitat-sh/ipc-channel
  habitat-sh/nitox: habitat-sh/nitox
  habitat-sh/core-plans: habitat-sh/core-plans
  habitat-sh/rust-nats: habitat-sh/rust-nats
  habitat-sh/prost: habitat-sh/prost
  habitat-sh/retry: habitat-sh/retry
  habitat-sh/windows-service: habitat-sh/windows-service
  habitat-sh/release-engineering: habitat-sh/release-engineering
  habitat-sh/habitat-example-plans: habitat-sh/habitat-example-plans
  habitat-sh/homebrew-habitat: habitat-sh/homebrew-habitat
  habitat-sh/clap: habitat-sh/clap
  habitat-sh/structopt: habitat-sh/structopt

  # Source code and raw content (direct links)
  'https://raw.githubusercontent.com/habitat-sh/habitat': 'https://raw.githubusercontent.com/biome-sh/biome'
  'https://raw.githubusercontent.com/habitat-sh/builder': 'https://raw.githubusercontent.com/biome-sh/builder'

  'https://github.com/habitat-sh/habitat/project': 'https://github.com/habitat-sh/habitat/project'
  'https://github.com/habitat-sh/habitat/blob': 'https://github.com/habitat-sh/habitat/blob'
  'https://github.com/habitat-sh/habitat/commit': 'https://github.com/habitat-sh/habitat/commit'
  'https://github.com/habitat-sh/habitat/tree': 'https://github.com/habitat-sh/habitat/tree'
  'https://github.com/habitat-sh/habitat/raw': 'https://github.com/habitat-sh/habitat/raw'

  'https://github.com/habitat-sh/builder/blob': 'https://github.com/habitat-sh/builder/blob'
  'https://github.com/habitat-sh/builder/commit': 'https://github.com/habitat-sh/builder/commit'
  'https://github.com/habitat-sh/builder/tree': 'https://github.com/habitat-sh/builder/tree'
  'https://github.com/habitat-sh/builder/raw': 'https://github.com/habitat-sh/builder/raw'

  'https://github.com/habitat-sh/core-plans/blob': 'https://github.com/habitat-sh/core-plans/blob'
  'https://github.com/habitat-sh/core-plans/commit': 'https://github.com/habitat-sh/core-plans/commit'
  'https://github.com/habitat-sh/core-plans/tree': 'https://github.com/habitat-sh/core-plans/tree'
  'https://github.com/habitat-sh/core-plans/raw': 'https://github.com/habitat-sh/core-plans/raw'

  'https://github.com/chef/chef-oss-practices/blob': 'https://github.com/chef/chef-oss-practices/blob'

  # Github Source: Replace
  habitat-sh/habitat: biome-sh/biome
  habitat-sh/builder: biome-sh/builder

  # Project path
  components/backline/habitat: components/backline/habitat
  components/launcher/habitat: components/launcher/habitat
  components/pkg-cfize/habitat: components/pkg-cfize/habitat
  components/pkg-dockerize/habitat: components/pkg-dockerize/habitat
  components/pkg-export-docker/habitat: components/pkg-export-docker/habitat
  components/pkg-export-tar/habitat: components/pkg-export-tar/habitat
  components/pkg-mesosize/habitat: components/pkg-mesosize/habitat
  components/plan-build-ps1/habitat: components/plan-build-ps1/habitat
  components/plan-build/habitat: components/plan-build/habitat
  components/studio/habitat: components/studio/habitat
  components/sup/habitat: components/sup/habitat

  components/hab/habitat: components/bio/habitat
  components/hab: components/bio
  src/cli/habitat: src/cli/biome
  src/cli/hab: src/cli/bio

  components/builder-api/habitat: components/builder-api/habitat
  components/builder-api-proxy/habitat: components/builder-api-proxy/habitat
  components/builder-graph/habitat: components/builder-graph/habitat
  components/builder-jobsrv/habitat: components/builder-jobsrv/habitat
  components/builder-minio/habitat: components/builder-minio/habitat
  components/builder-worker/habitat: components/builder-worker/habitat
  components/builder-datastore/habitat: components/builder-datastore/habitat
  components/builder-memcached/habitat: components/builder-memcached/habitat

  target/debug/habitat: target/debug/biome
  target/debug/hab: target/debug/bio

  '###HABITAT': '###BIOME'

  # When habitat will move to its own origin this will work
  pkg_origin=habitat: pkg_origin=biome
  'pkg_origin="habitat"': 'pkg_origin="biome"'
  '$pkg_origin = "habitat"': '$pkg_origin = "biome"'
  '$pkg_origin="habitat"': '$pkg_origin="biome"'

  pkg_path_for habitat: pkg_path_for biome
  pkg_path_for hab: pkg_path_for bio
  Get-HabPackagePath habitat: Get-HabPackagePath biome
  Get-HabPackagePath hab: Get-HabPackagePath bio

  # Package Ident
  habitat/builder-api-proxy: biome/builder-api-proxy
  habitat/builder-api: biome/builder-api
  habitat/builder-graph: biome/builder-graph
  habitat/builder-jobsrv: biome/builder-jobsrv
  habitat/builder-minio: biome/builder-minio
  habitat/builder-worker: biome/builder-worker
  habitat/builder-datastore: biome/builder-datastore
  habitat/builder-memcached: biome/builder-memcached
  habitat/builder-originsrv: biome/builder-originsrv
  habitat/builder-router: biome/builder-router
  habitat/builder-sessionsrv: biome/builder-sessionsrv

  'HAB_ORIGIN="habitat"': 'HAB_ORIGIN="biome"'
  'HAB_ORIGIN=habitat': 'HAB_ORIGIN=biome'

  status.habitat.sh: status.biome.sh
  api.habitat.sh: api.biome.sh
  builder.habitat.sh: builder.biome.sh
  builder.acceptance.habitat.sh: builder.acceptance.biome.sh
  acceptance.habitat.foo: acceptance.biome.foo

  # Surprisingly this is safe constant
  Habitat: Biome

  # Windows Studio Functions and Constants preserve
  Write-HabInfo: Write-HabInfo
  Get-HabServicePID: Get-HabServicePID
  Get-HabPackagePath: Get-HabPackagePath
  Resolve-HabPkgPath: Resolve-HabPkgPath

  # Make compatibility with habitat
  habitat/plan.sh: habitat/plan.sh
  habitat/x86_64-linux-kernel2: habitat/x86_64-linux-kernel2
  habitat/x86_64-darwin: habitat/x86_64-darwin
  habitat/plan.ps1: habitat/plan.ps1
  habitat/hooks: habitat/hooks
  habitat\hooks: habitat\\hooks
  habitat/config: habitat/config
  habitat\config: habitat\\config
  habitat/default.toml: habitat/default.toml
  habitat\default.toml: habitat\\default.toml
  PLAN_CONTEXT/habitat: PLAN_CONTEXT/habitat
  PLAN_CONTEXT\habitat: PLAN_CONTEXT\\habitat

  'habitat/plan.${ext}': 'habitat/plan.${ext}'

  # Make path compatible on Linux
  hab/bin: hab/bin
  hab/etc: hab/etc
  hab/launcher: hab/launcher
  hab/sup: hab/sup
  hab/svc: hab/svc
  hab/pkgs: hab/pkgs
  hab/cache: hab/cache
  hab/studios: hab/studios
  ~/.hab: ~/.hab
  '$HOME/.hab': '$HOME/.hab'
  .hab_pkg: .bio_pkg
  'home.join(".hab")': 'home.join(".hab")'

  'rm -Rf /hab': 'rm -Rf /hab'
  libexec/hab: libexec/bio
  libexec_path/hab: libexec_path/bio
  'hab="${HAB_BIN_DIR}/hab"': 'hab="${HAB_BIN_DIR}/bio"'
  # # Preserve path joining in supervisor
  '            .join("hab")': '            .join("hab")'

  /hab/tmp/harts/: /hab/tmp/harts/
  habKeysPipe: bioKeysPipe
  habclient: bioclient

  # Make path compatible also on Windows
  hab\bin: hab\\bin
  hab\etc: hab\\etc
  hab\launcher: hab\\launcher
  hab\sup: hab\\sup
  hab\svc: hab\\svc
  hab\pkgs: hab\\pkgs
  hab\cache: hab\\cache
  hab\studios: hab\\studios
  \.hab\: \\.hab\\

  'Join-Path -Path $env:SystemDrive -ChildPath hab': 'Join-Path -Path $env:SystemDrive -ChildPath hab'
  'Join-Path $tempRoot "hab"': 'Join-Path $tempRoot "hab"'
  $env:SYSTEMDRIVE\hab\: $env:SYSTEMDRIVE\\hab\\

  # Double slash in quotes translate too
  hab\\bin: hab\\\\bin
  hab\\etc: hab\\\\etc
  hab\\launcher: hab\\\\launcher
  hab\\sup: hab\\\\sup
  hab\\svc: hab\\\\svc
  hab\\pkgs: hab\\\\pkgs
  hab\\cache: hab\\\\cache
  hab\\studios: hab\\\\studios

  # Core variables
  core/habitat-builder-web: biome/biome-builder-web
  # Linux
  core/hab-: biome/bio-
  habitat/hab-: biome/bio-
  'core/hab hab': 'biome/bio bio'
  'habitat/hab hab': 'biome/bio bio'
  core/hab: biome/bio
  habitat/hab: biome/bio
  core/windows-service: biome/windows-service
  habitat/windows-service: biome/windows-service

  # Windows
  core\hab-: biome\\bio-
  habitat\hab-: biome\\bio-
  'core\hab hab': 'biome\\bio bio'
  'habitat\hab hab': 'biome\\bio bio'
  core\hab: biome\\bio
  habitat\hab: biome\\bio
  core-hab: biome-bio
  habitat-hab: biome-bio

  .secrets/habitat-env: .secrets/biome-env

  # Builder plan path compatibility (looks hacky, I know)
  'default_plan_path() -> PathBuf { PathBuf::from("habitat")': 'default_plan_path() -> PathBuf { PathBuf::from("habitat")'
  'p.ends_with("habitat")': 'p.ends_with("habitat")'
  '        p.push("habitat");': '        p.push("habitat");'
  'if parts.last().map_or("", |p| *p) == "habitat"': 'if parts.last().map_or("", |p| *p) == "habitat"'

  "  --exclude='habitat'": "  --exclude='habitat'"

  'title="habitat.sh"': 'title="biome.sh"'
  habitatConfig: biomeConfig
  habitat.conf: biome.conf
  AWS_PROFILE=habitat: AWS_PROFILE=biome

  '"habitat"': '"biome"'
  .habitat.dev: .biome.dev

  '/install-habitat/': '/install-habitat/'
  '/habitat-cli/': '/habitat-cli/'
  habitat/s3-bulk-uploader: habitat/s3-bulk-uploader

  '(Test-Command hab)': '(Test-Command bio)'

  '$habVersionCmd': '$bioVersionCmd'
  '$habEnterCmd': '$bioEnterCmd'
  '$habProc': '$bioProc'
  '$habExe': '$bioExe'
  '$habSvc': '$bioSvc'

  # Plan functionons
  _hab(): _bio()

  # Plan variables
  _hab_cmd: _bio_cmd
  hab_dir=: bio_dir=
  hab_package=: bio_package=
  hab_path=: bio_path=
  hab_ssl_cache=: bio_ssl_cache=

  '$hab_dir': '$bio_dir'
  '$hab_package': '$bio_package'
  '$hab_path': '$bio_path'
  '$hab_ssl_cache': '$bio_ssl_cache'

  '${hab_dir}': '${bio_dir}'
  '${hab_package}': '${bio_package}'
  '${hab_path}': '${bio_path}'
  '${hab_ssl_cache}': '${bio_ssl_cache}'
  '${hab}': '${bio}'

  hab_uid =: bio_uid =
  hab_gid =: bio_gid =
  hab_root =: bio_root =
  hab_sup =: bio_sup =
  hab_pkg =: bio_pkg =
  hab_sup_run =: bio_sup_run =
  hab_pkg_path =: bio_pkg_path =
  hab_pkgs_path =: bio_pkgs_path =
  hab_pkg_binary_path =: bio_pkg_binary_path =

  = hab_root: = bio_root
  = hab_hook: = bio_hook

  # Habitat Commands
  'hab --version': 'bio --version'
  'hab supportbundle': 'bio supportbundle'
  'hab bldr': 'bio bldr'
  'hab cli': 'bio cli'
  'hab config': 'bio config'
  'hab file': 'bio file'
  'hab help': 'bio help'
  'hab license': 'bio license'
  'hab origin': 'bio origin'
  'hab pkg': 'bio pkg'
  'hab plan': 'bio plan'
  'hab ring': 'bio ring'
  'hab studio': 'bio studio'
  'hab sup': 'bio sup'
  'hab svc': 'bio svc'
  'hab user': 'bio user'
  'hab apply': 'bio apply'
  'hab install': 'bio install'
  'hab run': 'bio run'
  'hab setup': 'bio setup'
  'hab start': 'bio start'
  'hab stop': 'bio stop'
  'hab term': 'bio term'

  'command -v hab': 'command -v bio'
  'if exists hab': 'if exists bio'
  '$(which hab)': '$(which bio)'
  '"$hab" "$@"': '"$bio" "$@"'

  hab-backline: bio-backline
  hab-plan: bio-plan
  hab-pkg: bio-pkg
  hab-studio: bio-studio
  hab-sup: bio-sup
  hab-launcher: bio-launcher
  hab-launch: bio-launch
  hab-crypt: bio-crypt
  hab-base: bio-base
  hab-user: bio-user
  hab-bats: bio-bats
  hab-channel: bio-channel
  hab-origin: bio-origin
  hab-?: bio-?

  'Start-Process hab': 'Start-Process bio'
  'Get-Process hab': 'Get-Process bio'
  'Get-Ident hab': 'Get-Ident bio'
  'hab $cliVersion': 'bio $cliVersion'

# Habitat binaries
  'ctx.bin_path().join("hab")': 'ctx.bin_path().join("bio")'
  hab.exe: bio.exe
  bin/hab: bin/bio

  ../habitat: ../habitat
  ' /habitat': ' /habitat'

  ../hab: ../bio
  ' /hab': ' /hab'

  # Habitat User
  'useradd --system --no-create-home hab': 'useradd --system --no-create-home hab'
  'adduser --system hab': 'adduser --system hab'

  'useradd hab': 'useradd hab'
  'adduser hab': 'adduser hab'
  'useradd --user-group hab': 'useradd --user-group hab'

  '/bin/id -u hab': '/bin/id -u hab'
  '/sbin/useradd hab': '/sbin/useradd hab'
  '/bin/chown -R hab:hab': '/bin/chown -R hab:hab'
  'hab:hab': 'hab:hab'

  'su hab -c': 'su hab -c'

  'svc_user=hab': 'svc_user=hab'
  'svc_user="hab"': 'svc_user="hab"'
  'svc_user = "hab"': 'svc_user = "hab"'
  '"svc_user": "hab"': '"svc_user": "hab"'

  'run_user="hab': 'run_user="hab'
  '$username = "hab"': '$username = "hab"'
  "given a 'hab' user": "given a 'hab' user"

  'DEFAULT_USER: &str = "hab"': 'DEFAULT_USER: &str = "hab"'
  'Cow::Owned("hab".into())': 'Cow::Owned("hab".into())'
  'EtcPasswdEntry::new("hab"': 'EtcPasswdEntry::new("hab"'
  'The user to run the service as. The default is hab.': 'The user to run the service as. The default is hab.'
  '("root", "hab")': '("root", "hab")'
  '("hab", "hab")': '("hab", "hab")'
  '("hab", "root")': '("hab", "root")'
  '("hab", _)': '("hab", _)'

  'assert_eq!(users[1].name, "hab");': 'assert_eq!(users[1].name, "hab");'
  'assert_eq!(groups[1].name, "hab");': 'assert_eq!(groups[1].name, "hab");'
  'assert_eq!(users[0].name, "hab");': 'assert_eq!(users[0].name, "hab");'
  'assert_eq!(groups[0].name, "hab");': 'assert_eq!(groups[0].name, "hab");'
  'assert_eq!(users[1].name, "hab");': 'assert_eq!(users[1].name, "hab");'
  'assert_eq!(groups[1].name, "hab");': 'assert_eq!(groups[1].name, "hab");'

  # Root FS
  rootfs/hab: rootfs/hab
  FS_ROOT/hab: FS_ROOT/hab
  'ROOT_PATH:=/hab': 'ROOT_PATH:=/hab'
  'ROOT_PATH = "\hab"': 'ROOT_PATH = "\\hab"'
  'pub const ROOT_PATH: &str = "hab";': 'pub const ROOT_PATH: &str = "hab";'
  'rootfs.join("hab")': 'rootfs.join("hab")'
  'Path::new(&*FS_ROOT_PATH).join("hab")': 'Path::new(&*FS_ROOT_PATH).join("hab")'
  'PathBuf::from(&*FS_ROOT_PATH).join("hab")': 'PathBuf::from(&*FS_ROOT_PATH).join("hab")'
  '$PSScriptRoot\hab': '$PSScriptRoot\\hab'
  'if [ -f "/hab': 'if [ -f "/hab'
  'tar_builder.append_dir_all("hab", hab_pkgs_path);': 'tar_builder.append_dir_all("hab", bio_pkgs_path);'

  # Cargo.lock
  '"hab 0.0.0"': '"bio 0.0.0"'
  'hab {}': 'bio {}'
  'hab{}sup': 'bio{}sup'

  '            if s.starts_with("hab/")': '            if s.starts_with("bio/")'

  # # Allow bio user agent
  'hab|builder': 'hab|bio|builder'

  # Builder DB compatibility
  hab_client: hab_client

  # # Mostly for builder
  'initdb -U hab': 'initdb -U hab'
  'psql -U hab': 'psql -U hab'
  'user = "hab"': 'user = "hab"'
  'all             hab': 'all             hab'
  'replication     hab': 'replication     hab'
  'user:                   String::from("hab")': 'user:                   String::from("hab")'
  'useradd -r -U hab': 'useradd -r -U hab'
  "name = 'hab'": "name = 'hab'"
  "password = 'hab'": "password = 'hab'"
  habitat-dev: habitat-dev



  ############# BEGINCOMMON REPLACE SECTION AT BOTTOM ###############
  # Mask HAB_ constants
  HAB_: HAB_
  HAB-: HAB-

  HABITAT VERSION: BIOME VERSION
  HABITAT_: HABITAT_
  "'HABITAT'": "'HABITAT'"

  Hab: Bio

  'habitat_': 'biome_'
  'habitat-': 'biome-'

  habicat: biocat

  ' habitat': ' biome'
  'habitat ': 'biome '

  /habitat: /habitat

  'let mut hab': 'let mut bio'
  '&mut hab': '&mut bio'

  # Coincidence
  reachable: reachable
  alphabet: alphabet
  searchable: searchable
  dispatchable: dispatchable

  'hab::': 'bio::'
  hab_: bio_
  'hab:': 'bio:'
  '[hab': '[bio'
  'hab=': 'bio='
  'hab =': 'bio ='
  ' hab ': ' bio '
  .hab: .bio
  '&hab': '&bio'
  '"hab"': '"bio"'
  # user/group combination
  hab/hab: hab/hab
  ' hab': ' bio'

  # tests
  'hab1': 'bio1'
  'hab2': 'bio2'
  '`hab': '`bio'
  'build-hab': 'build-bio'
  '`$hab': '`$bio'
  '/hab-': '/bio-'

  'hab-': 'bio-'


  ############# END COMMON REPLACE SECTION AT BOTTOM ################


  # Habitat: Biome
  # habitat: biome
  # habiat: biome
  # Habiat: Biome

  # # Convert paths explicitly
  # cli/hab/bldr: cli/bio/bldr
  # cli/hab/cli: cli/bio/cli
  # cli/hab/config: cli/bio/config
  # cli/hab/file: cli/bio/file
  # cli/hab/license: cli/bio/license
  # cli/hab/origin: cli/bio/origin
  # cli/hab/pkg: cli/bio/pkg
  # cli/hab/plan: cli/bio/plan
  # cli/hab/ring: cli/bio/ring
  # cli/hab/studio: cli/bio/studio
  # cli/hab/sup: cli/bio/sup
  # cli/hab/svc: cli/bio/svc
  # cli/hab/tests: cli/bio/tests
  # cli/hab/user: cli/bio/user
  # cli/hab/util: cli/bio/util

  # # Make some biome path compatible
  # hab/bin: hab/bin
  # hab/etc: hab/etc
  # hab/launcher: hab/launcher
  # hab/sup: hab/sup
  # hab/svc: hab/svc
  # hab/pkgs: hab/pkgs
  # hab/cache: hab/cache
  # hab/studios: hab/studios
  # ~/.hab: ~/.hab

  # # Also windows
  # hab\bin: hab\\bin
  # hab\etc: hab\\etc
  # hab\launcher: hab\\launcher
  # hab\sup: hab\\sup
  # hab\svc: hab\\svc
  # hab\pkgs: hab\\pkgs
  # hab\cache: hab\\cache
  # hab\studios: hab\\studios

  # # Double slash in quotes translate too
  # hab\\bin: hab\\\\bin
  # hab\\etc: hab\\\\etc
  # hab\\launcher: hab\\\\launcher
  # hab\\sup: hab\\\\sup
  # hab\\svc: hab\\\\svc
  # hab\\pkgs: hab\\\\pkgs
  # hab\\cache: hab\\\\cache
  # hab\\studios: hab\\\\studios

  # hab/hab: hab/hab
  # ' hab ': ' bio '

  # # Translate all habs beacause
  # # Replacing hab -> bio is danger (word `unreachable` will be `unreacbiole` )
  # hab/: bio/
  # hab\: bio\\
  # hab\\: bio\\\\

  # # Assigments
  # =hab: =bio
  # hab=: bio=
  # '= hab': '= bio'
  # 'hab =': 'bio ='
  # '= "hab"': '= "bio"'

  # # Relative path
  # ../hab: ../bio

  # # Variables
  # _hab: _bio
  # hab_: bio_
  # -hab: -bio
  # hab-: bio-
  # '&hab': '&bio'
  # '$hab': '$bio'
  # '${hab}': '${bio}'

  # /hab: /bio
  # bin/hab: bin/bio
  # 'use hab': 'use bio'
  # 'hab::': 'bio::'

  # # String occurances
  # '"hab"': '"bio"'
  # "'hab'": "'bio'"
  # ' hab': ' bio'
  # # Not always works somewhy?
  # '`hab': '`bio'


  # 'hab ': 'bio '

  # 'hab:': 'bio:'
  # hab\: bio\\
  # \hab: \\bio
  # ':hab': ':bio'
  # '[hab]': '[bio]'
  # .hab: .bio



# Delete some files which safe to ignore
deletes:
  # Cargo.lock is wrong for us
  - Cargo.lock

  # Silence mentions
  - .mailmap
  - .mention-bot
  - CODEOWNERS

  # Development will go in upstream
  - CONTRIBUTING.md
  - MAINTAINERS.md
  - RELEASE.md
  - CODE_OF_CONDUCT.md
  - CHANGELOG_FAKE.md
  - .github
  - DEVELOPING.md

  # Remove stock travis and other ci-s
  - .travis.yml
  - .expeditor
  - .buildkite

  - terraform


# Excludes from patching contents
excludes:
  # - README.md
  - CHANGELOG.md
  - LICENSE
